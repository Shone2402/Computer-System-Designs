CHIP CLA8bitwithHT{
	IN X[8],Y[8],AS,signed;
	OUT S[8],C8,OF;
	
	PARTS:
	
	//We first perform XOR to convert our Y to -Y in case AS is 1
	Xor(a=Y[0],b=AS,out=Z0);
	Xor(a=Y[1],b=AS,out=Z1);
	Xor(a=Y[2],b=AS,out=Z2);
	Xor(a=Y[3],b=AS,out=Z3);
	Xor(a=Y[4],b=AS,out=Z4);
	Xor(a=Y[5],b=AS,out=Z5);
	Xor(a=Y[6],b=AS,out=Z6);
	Xor(a=Y[7],b=AS,out=Z7);
	
	//We then create all our P terms; Pi= Xi XOR Zi
	Xor(a=X[0],b=Z0,out=P0);
	Xor(a=X[1],b=Z1,out=P1);
	Xor(a=X[2],b=Z2,out=P2);
	Xor(a=X[3],b=Z3,out=P3);
	Xor(a=X[4],b=Z4,out=P4);
	Xor(a=X[5],b=Z5,out=P5);
	Xor(a=X[6],b=Z6,out=P6);
	Xor(a=X[7],b=Z7,out=P7);
	
	//We then create all our G terms; Gi= Xi AND Zi
	And(a=X[0],b=Z0,out=G0);
	And(a=X[1],b=Z1,out=G1);
	And(a=X[2],b=Z2,out=G2);
	And(a=X[3],b=Z3,out=G3);
	And(a=X[4],b=Z4,out=G4);
	And(a=X[5],b=Z5,out=G5);
	And(a=X[6],b=Z6,out=G6);
	And(a=X[7],b=Z7,out=G7);



	//Generating PIi's and other partial terms as required. T0i denotes the C0/C4 term in the expansion of Ci

	And(a=P0,b=P1,out=p1PI0,out=T02);
	And(a=P2,b=p1PI0,out=p2PI0,out=T03);
	And(a=P3,b=p2PI0,out=PI0);
	
	And(a=P4,b=P5,out=p1PI1,out=T06);
	And(a=P6,b=p1PI1,out=p2PI1,out=T07);
	And(a=P7,b=p2PI1,out=PI1);


	//Generating GIi's and all the partial G terms for the other Ci. Eg:T12 - represents the 1st G term in C2, T36 - represents the 3rd G term in C6 and so on. piGIx represents part i of GIx. 

	And(a=P1,b=G0,out=T12);
	And(a=P2,b=T12,out=T13);
	And(a=P3,b=T13,out=p1GI0);
	And(a=P2,b=G1,out=T23);
	And(a=P3,b=T23,out=p2GI0);
	And(a=P3,b=G2,out=p3GI0);
	Or(a=p1GI0,b=p2GI0,out=h1GI0);
	Or(a=p3GI0,b=G3,out=h2GI0);
	Or(a=h1GI0,b=h2GI0,out=GI0);

	And(a=P5,b=G4,out=T16);
	And(a=P6,b=T16,out=T17);
	And(a=P7,b=T17,out=p1GI1);
	And(a=P6,b=G5,out=T27);
	And(a=P7,b=T27,out=p2GI1);
	And(a=P7,b=G6,out=p3GI1);
	Or(a=p1GI1,b=p2GI1,out=h1GI1);
	Or(a=p3GI1,b=G7,out=h2GI1);
	Or(a=h1GI1,b=h2GI1,out=GI1);


	//We shall now calculate the terms required for c4,c8,c12,c16 and then generate them using the same logic as a 4 bit CLA adder.


	//Terms associated with C0
	And(a=PI0,b=AS,out=TI01);
	And(a=PI1,b=TI01,out=TI02);
	
	//Terms associated with GI0
	And(a=PI1,b=GI0,out=TI12);

	//Generating c4,c8
	Or(a=TI01,b=GI0,out=C4);

	Or(a=TI02,b=TI12,out=p1C8);
	Or(a=p1C8,b=GI1,out=C8,out=C8OF);
	


	//Now we calculate all other Ci terms
	
	//These X terms are the first terms in the C rep containing (Pi...Cx)
	And(a=P0,b=AS,out=X01);
	And(a=T02,b=AS,out=X02);
	And(a=T03,b=AS,out=X03);
	And(a=P4,b=C4,out=X05);
	And(a=T06,b=C4,out=X06);
	And(a=T07,b=C4,out=X07);

	
	//We now merge the X term, and all T1,T2 terms belonging to Ci
	Or(a=X01,b=G0,out=C1);

	Or(a=X02,b=T12,out=p1C2);
	Or(a=p1C2,b=G1,out=C2);
	
	Or(a=X03,b=T13,out=p1C3);
	Or(a=p1C3,b=T23,out=p2C3);
	Or(a=p2C3,b=G2,out=C3);
	
	Or(a=X05,b=G4,out=C5);

	Or(a=X06,b=T16,out=p1C6);
	Or(a=p1C6,b=G5,out=C6);
	
	Or(a=X07,b=T17,out=p1C7);
	Or(a=p1C7,b=T27,out=p2C7);
	Or(a=p2C7,b=G6,out=C7);
	
	
	//We finally generate sum bits
	
	Xor(a=AS,b=P0,out=S[0]);
	Xor(a=C1,b=P1,out=S[1]);
	Xor(a=C2,b=P2,out=S[2]);
	Xor(a=C3,b=P3,out=S[3]);
	Xor(a=C4,b=P4,out=S[4]);
	Xor(a=C5,b=P5,out=S[5]);
	Xor(a=C6,b=P6,out=S[6]);
	Xor(a=C7,b=P7,out=S[7]);

	//We generate overflow seperately depending on signed and unsigned cases
	Not(in=signed, out=unsigned);
	Not(in=AS, out=notAS);
	Xor(a=C8OF,b=C7,out=OFsign);
	And(a=OFsign,b=signed,out=OFsigned);	
	And(a=C8OF,b=unsigned,out=p1OFunsigned);
	And(a=p1OFunsigned,b=notAS,out=OFunsigned);
	Or(a=OFsigned,b=OFunsigned,out=OF);
		
		
}
